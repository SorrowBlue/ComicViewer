---
name: Version Bump

on:
  workflow_dispatch:
    inputs:
      dry_run:
        description: 'Run in dry run mode (no commits or PR creation)'
        required: false
        default: false
        type: boolean
      custom_commit_message:
        description: 'Custom commit message (default: ":rocket: bump versionCode")'
        required: false
        default: ':rocket: bump versionCode'
        type: string
  push:
    branches:
      - 'copilot/**'
    paths:
      - '.github/workflows/version-bump-release.yml'

permissions:
  contents: write
  pull-requests: write

jobs:
  version-bump:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Setup Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Set dry run mode for push events
        id: set_dry_run
        run: |
          if [ "${{ github.event_name }}" = "push" ]; then
            echo "dry_run=true" >> $GITHUB_OUTPUT
            echo "Running in dry run mode (triggered by push event)"
          else
            echo "dry_run=${{ inputs.dry_run }}" >> $GITHUB_OUTPUT
          fi

      - name: Read current versionCode
        id: current_version
        run: |
          if ! grep -q 'versionCode = ' gradle/libs.versions.toml; then
            echo "Error: versionCode not found in gradle/libs.versions.toml"
            exit 1
          fi
          
          CURRENT_VERSION=$(grep 'versionCode = ' gradle/libs.versions.toml | sed 's/.*"\([0-9]*\)".*/\1/')
          
          if ! [[ "$CURRENT_VERSION" =~ ^[0-9]+$ ]]; then
            echo "Error: Invalid versionCode format: $CURRENT_VERSION"
            exit 1
          fi
          
          echo "current=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "Current versionCode: $CURRENT_VERSION"

      - name: Increment versionCode
        id: new_version
        run: |
          CURRENT_VERSION=${{ steps.current_version.outputs.current }}
          NEW_VERSION=$((CURRENT_VERSION + 1))
          echo "new=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "New versionCode: $NEW_VERSION"

      - name: Update versionCode in libs.versions.toml
        run: |
          NEW_VERSION=${{ steps.new_version.outputs.new }}
          
          # Create backup
          cp gradle/libs.versions.toml gradle/libs.versions.toml.bak
          
          # Update version
          sed -i "s/versionCode = \"[0-9]*\"/versionCode = \"$NEW_VERSION\"/" gradle/libs.versions.toml
          
          # Verify the change was successful
          if ! grep -q "versionCode = \"$NEW_VERSION\"" gradle/libs.versions.toml; then
            echo "Error: Failed to update versionCode"
            mv gradle/libs.versions.toml.bak gradle/libs.versions.toml
            exit 1
          fi
          
          echo "Updated versionCode to $NEW_VERSION"
          echo "Changes made:"
          diff gradle/libs.versions.toml.bak gradle/libs.versions.toml || true
          rm gradle/libs.versions.toml.bak

      - name: Create branch and commit versionCode increment
        if: ${{ steps.set_dry_run.outputs.dry_run != 'true' }}
        run: |
          COMMIT_MESSAGE="${{ inputs.custom_commit_message || ':rocket: bump versionCode' }}"
          BRANCH_NAME="release/version-bump-$(date +%Y%m%d-%H%M%S)"
          
          # Create and switch to new branch
          git checkout -b "$BRANCH_NAME"
          
          # Commit changes
          git add gradle/libs.versions.toml
          git commit -m "$COMMIT_MESSAGE"
          
          # Push branch to origin
          git push origin "$BRANCH_NAME"
          
          echo "Created branch: $BRANCH_NAME"
          echo "Committed with message: $COMMIT_MESSAGE"
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_ENV

      - name: Create Pull Request for version bump
        if: ${{ steps.set_dry_run.outputs.dry_run != 'true' }}
        run: |
          BRANCH_NAME="${{ env.branch_name }}"
          PR_TITLE="ðŸš€ Bump versionCode to ${{ steps.new_version.outputs.new }}"
          PR_BODY="Automated version bump from ${{ steps.current_version.outputs.current }} to ${{ steps.new_version.outputs.new }}

          This PR was automatically created by the Version Bump and Release workflow.

          - Previous versionCode: ${{ steps.current_version.outputs.current }}
          - New versionCode: ${{ steps.new_version.outputs.new }}
          - Commit: ${{ inputs.custom_commit_message || ':rocket: bump versionCode' }}

          Please review and merge this PR to complete the version bump process."

          gh pr create \
            --title "$PR_TITLE" \
            --body "$PR_BODY" \
            --head "$BRANCH_NAME" \
            --base main \
            --label "release" \
            --label "automated"
          
          echo "Created PR for branch: $BRANCH_NAME"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Summary
        run: |
          echo "## Version Bump Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Previous versionCode**: ${{ steps.current_version.outputs.current }}" >> $GITHUB_STEP_SUMMARY
          echo "- **New versionCode**: ${{ steps.new_version.outputs.new }}" >> $GITHUB_STEP_SUMMARY
          
          DRY_RUN="${{ steps.set_dry_run.outputs.dry_run }}"
          if [ "$DRY_RUN" = "true" ]; then
            echo "- **Mode**: Dry run (no changes committed)" >> $GITHUB_STEP_SUMMARY
            if [ "${{ github.event_name }}" = "push" ]; then
              echo "- **Trigger**: Push event (auto dry-run)" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "- **Branch Created**: ${{ env.branch_name }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Pull Request**: Created for version bump" >> $GITHUB_STEP_SUMMARY
            echo "- **Commit**: ${{ inputs.custom_commit_message || ':rocket: bump versionCode' }}" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Next Steps:** Review and merge the created PR to complete the version bump process." >> $GITHUB_STEP_SUMMARY
          fi